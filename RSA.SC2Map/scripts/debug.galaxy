//=============
// debug.galaxy
//=============

static void TestSmallNumbers() {
    BigNum_t base;
    BigNum_t exp;
    BigNum_t mod;
    BigNum_t result;

    StringToBigNum("4", base);
    StringToBigNum("13", exp);
    StringToBigNum("497", mod);
    BigNumModExp(base, exp, mod, result);
    LogBigNum("Result: ", result); // Expected result: 445
}

static void RSA1024() {
    BigNum_t base;
    BigNum_t mod;
    BigNum_t result;
    string PUBLIC_KEY_N = "94713646782161394424368677721623842061248824764984484847757767245852714476645733680834389843827143071194293334902742549088196248690771091243883977386632753968933100970815411253115341265168888321760119043238699891567437533442721961615367959839303517618838705644004588944464591742421671310902236250706676534441";
    string ENCRYPTED_MESSAGE = "16003675996797057933684426177525959634861458176631048578592691912412186942856760010240215672588330250162750851913634890015356521643640872020312523914366633833331331323898246994999902660750352343736393309025469295114416832677694038306597490800644233102797784377436193912374962448381071364728935440792505685660";
    
    StringToBigNum(ENCRYPTED_MESSAGE, base);
    StringToBigNum(PUBLIC_KEY_N, mod);
    BigNumModExp2(base, mod, result);
    LogBigNum("RSA-1024 Decrypted Hash: ", result); // Expected result: 1119272548434844720456232458901450138120910650604
}

static void RSA2048() { // MAX_DIGITS = 512;
    BigNum_t base;
    BigNum_t mod;
    BigNum_t result;
    string PUBLIC_KEY_N = "14890711583427928485903975478681943851062060059514520110928850773563297790835867027664388368444547815078724875650910654407250799597572462010895313363739292662111985986203281897656597027532152595789392219630120966274254002615761708354475058348159711849956814359419947266173627061627314080042304362086790126305625843904412463423769226123504219500561711780138644300746159737947942565847775904740372217628917387541908027880920068170403218644247419519798643690363081572127857213916175983913254712406647369298582011386249863286796881022441971674202954917403284862138111300082818305545511638266939612647702138222907280480513";
    string ENCRYPTED_MESSAGE = "14561677020181408877622220678764798857868517881393349940132232457640628197181181284720420322763186331201983070994824843766072127374240041657959702905431615538605686283073687210036113551630375081754192156499379238322527055408004799135588099313905398871823696402449769315062254805943258093246733712309644294376156968110126727914664585733069395220774204504289587377872711689087473052809915363122272409270477649888039421380298513255958940582761137836867858463597103979281355124779727020588844549373010192219536452040885650679651801231304920755430616434969578871503713363389230452026899639679318302443594174318954343774908";

    StringToBigNum(ENCRYPTED_MESSAGE, base);
    StringToBigNum(PUBLIC_KEY_N, mod);
    BigNumModExp2(base, mod, result);
    LogBigNum("RSA-2048 Decrypted Hash: ", result); // Expected result: 443119762360062732707690290811963905379606208197
}

static void HexToDecimal(){
    TriggerDebugOutput(1, StringToText(HexToDecimal("4e264fcb448cfb962fd9b4e646ab52053bf6da0e")), true); // Expected result: 446155659480832268636969781688359228631137311246
}

static void SHA1(){
    TriggerDebugOutput(1, StringToText(SHA1HashString("Starcraft II")), true); // Expected result: EAD233A04C85905D5681A0FDFEBDF9617C83EE14
}

static void Base64() {
    string encoded = EncodeBase64("Starcraft II");
    string decoded = DecodeBase64(encoded);

    TriggerDebugOutput(1, StringToText(encoded), true); // Expected result: U3RhcmNyYWZ0IElJ
    TriggerDebugOutput(1, StringToText(decoded), true); // Expected result: Starcraft II
}

static void Base64ToDecimal() {
    // bin: 0000110100001010110111111011000000001110000101010110110100100010010010011100011100010110100011001100011000101101001010101110100011111110100100111100001000001011
    TriggerDebugOutput(1, StringToText(Base64ToDecimal("DQrfsA4VbSJJxxaMxi0q6P6Twgs=")), true); // Expected result: 74459373420875024340873459839484743027407438347
}

static void DebugInit() {
   // TestSmallNumbers();
   // RSA1024();
   // RSA2048();
   // HexToDecimal();
   // SHA1();
   // Base64();
   // Base64ToDecimal();
}